<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Out\ReleaseInFlash\LPC1700.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Out\ReleaseInFlash\LPC1700.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Wed Dec 20 16:52:19 2017
<BR><P>
<H3>Maximum Stack Usage =       1984 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
mainTask &rArr; dspstandbypage &rArr; dspQR_Code &rArr; T6963_DispQR_Code &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[61]">OS_ENTER_CRITICAL</a>
 <LI><a href="#[63]">OS_EXIT_CRITICAL</a>
 <LI><a href="#[ee]">OSStartHighRdy</a>
 <LI><a href="#[f6]">OSCtxSw</a>
 <LI><a href="#[ec]">OSIntCtxSw</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[168]">intDisAll</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[20]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC_IRQHandler</a><BR>
 <LI><a href="#[a0]">PTL104DataAnalysis</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a0]">PTL104DataAnalysis</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[21]">BOD_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2c]">CANActivity_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[23]">CAN_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[24]">DMA_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3f]">DisplayTask</a> from main.o(i.DisplayTask) referenced from main.o(i.mainTask)
 <LI><a href="#[1c]">EINT0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1d]">EINT1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1e]">EINT2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1f]">EINT3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[26]">ENET_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[30]">GPIO_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[14]">I2C0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[15]">I2C1_IRQHandler</a> from it_isr.o(i.I2C1_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[16]">I2C2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[25]">I2S_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[32]">KFLASH_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2f]">LCD_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[27]">MCI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[28]">MCPWM_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3c]">NetTask</a> from main.o(i.NetTask) referenced from main.o(i.mainTask)
 <LI><a href="#[36]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(UCOSII_ASM)
 <LI><a href="#[37]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OS_InitTaskIdle)
 <LI><a href="#[38]">OS_TaskStat</a> from os_core.o(i.OS_TaskStat) referenced from os_core.o(i.OS_InitTaskStat)
 <LI><a href="#[1a]">PLL0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2a]">PLL1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[31]">PWM0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[13]">PWM1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from os_cpu_a.o(UCOSII_ASM) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[29]">QEI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3d]">RFCardTask</a> from main.o(i.RFCardTask) referenced from main.o(i.mainTask)
 <LI><a href="#[1b]">RTC_IRQHandler</a> from it_isr.o(i.RTC_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[17]">SPIFI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[18]">SSP0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[19]">SSP1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2e]">SSP2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from os_cpu_c.o(i.SysTick_Handler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[34]">SystemInit</a> from system_lpc177x_8x.o(i.SystemInit) referenced from startup_lpc177x_8x.o(.text)
 <LI><a href="#[b]">TIMER0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[c]">TIMER1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[d]">TIMER2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[e]">TIMER3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from uart1.o(i.UART1_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[11]">UART2_IRQHandler</a> from rs232.o(i.UART2_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[12]">UART3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2d]">UART4_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2b]">USBActivity_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[22]">USB_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3e]">Uart485_E_M_Task</a> from main.o(i.Uart485_E_M_Task) referenced from main.o(i.mainTask)
 <LI><a href="#[3b]">UartCfgTask</a> from main.o(i.UartCfgTask) referenced from main.o(i.mainTask)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[a]">WDT_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[35]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc177x_8x.o(.text)
 <LI><a href="#[39]">_sputc</a> from printf6.o(i._sputc) referenced from printf6.o(i.__0sprintf$6)
 <LI><a href="#[33]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3a]">mainTask</a> from main.o(i.mainTask) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[35]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(.text)
</UL>
<P><STRONG><a name="[155]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[40]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[156]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[157]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[158]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[159]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[15a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>KFLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>MCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPIFI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[15b]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>___aeabi_memmove4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_JFCLSJ
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104_KKXX_With_LogicNumber_unpack
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104_JQXXWithOrder_unpack
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104_JQXXWithOrderAndLogicNumber_unpack
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F104_ZZHSJ_PACK
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F104_ZXSJSJ_PACK
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F104_JFCLCDQK_UP_PACK
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F104_INF_PACK
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_Rsettime
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRemoteCtrlAsk
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Call_Over
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Call_Ack
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104DataAnalysis
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authtic_Deal_With
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_rs232
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_232Frame
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaInit
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStrategyMeterKwh
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
</UL>

<P><STRONG><a name="[15e]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeInfo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeEndInfo
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1RxbufClear
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_JFCLSJ
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspTermSn
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspQR_Code
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeInfo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeEndInfo
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTask
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2RxbufClear
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDataBuffer
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStrategyMeterKwh
</UL>

<P><STRONG><a name="[162]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8d]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_Line
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_fdiv</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_Line
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_Line
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_Line
</UL>

<P><STRONG><a name="[163]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[47]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[46]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[41]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[165]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>OS_ENTER_CRITICAL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveZXJYLSH
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_WriteData
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_WriteCMD
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_ReadStatus
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStrategyMeterKwh
</UL>

<P><STRONG><a name="[63]"></a>OS_EXIT_CRITICAL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveZXJYLSH
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_WriteData
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_WriteCMD
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_ReadStatus
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStrategyMeterKwh
</UL>

<P><STRONG><a name="[ee]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[f6]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[ec]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; sysTickInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTickInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[168]"></a>intDisAll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM), UNUSED)

<P><STRONG><a name="[4e]"></a>AD0_IN5_Value</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lpc_adc.o(i.AD0_IN5_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AD0_IN5_Value &rArr; ADCRead
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetStat
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCRead
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_Pin_Dector
</UL>

<P><STRONG><a name="[13b]"></a>ADCInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, lpc_adc.o(i.ADCInit))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[51]"></a>ADCRead</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lpc_adc.o(i.ADCRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADCRead
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD0_IN5_Value
</UL>

<P><STRONG><a name="[50]"></a>ADC_GetStat</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc_adc.o(i.ADC_GetStat))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD0_IN5_Value
</UL>

<P><STRONG><a name="[4f]"></a>ADC_Start</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lpc_adc.o(i.ADC_Start))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD0_IN5_Value
</UL>

<P><STRONG><a name="[138]"></a>All_Relay_Init</STRONG> (Thumb, 484 bytes, Stack size 0 bytes, relay.o(i.All_Relay_Init))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>AlphabetToBinaly</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, qr_encode.o(i.AlphabetToBinaly))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[52]"></a>Answer_R_Call</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ethernet.o(i.Answer_R_Call))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Answer_R_Call &rArr; Charge_State_Ack &rArr; send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Call_Over
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Call_Ack
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_State_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104DataAnalysis
</UL>

<P><STRONG><a name="[56]"></a>Authtic_Deal_With</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, ethernet.o(i.Authtic_Deal_With))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Authtic_Deal_With &rArr; PTL104_JQXXWithOrder_unpack &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104_JQXXWithOrder_unpack
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104_JQXXWithOrderAndLogicNumber_unpack
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspJQFHerr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104DataAnalysis
</UL>

<P><STRONG><a name="[5c]"></a>CP_Pin_Dector</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, lpc_adc.o(i.CP_Pin_Dector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CP_Pin_Dector &rArr; AD0_IN5_Value &rArr; ADCRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_CHG_JSSJ
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmDb1Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD0_IN5_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[5f]"></a>ChargeStrategyMeterKwh</STRONG> (Thumb, 776 bytes, Stack size 56 bytes, rs232.o(i.ChargeStrategyMeterKwh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ChargeStrategyMeterKwh &rArr; FRAMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMRead
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_rs232
</UL>

<P><STRONG><a name="[54]"></a>Charge_State_Ack</STRONG> (Thumb, 68 bytes, Stack size 72 bytes, ethernet.o(i.Charge_State_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Charge_State_Ack &rArr; send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F104_ZZHSJ_PACK
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F104_INF_PACK
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_State_Update
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Answer_R_Call
</UL>

<P><STRONG><a name="[65]"></a>Charge_State_Update</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, ethernet.o(i.Charge_State_Update))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_State_Ack
</UL>

<P><STRONG><a name="[147]"></a>CheckSum0904</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, rs232.o(i.CheckSum0904))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CheckSum0904
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_uart1
</UL>

<P><STRONG><a name="[69]"></a>ClearDataBuffer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rs232.o(i.ClearDataBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClearDataBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_rs232
</UL>

<P><STRONG><a name="[6a]"></a>CommandProcess</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, uart1.o(i.CommandProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = CommandProcess &rArr; Reset_ServerIP &rArr; FRAMWrite &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SendStr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_ServerIP
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SelfMASK
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SelfMAC
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SelfIP
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Pile_No
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Maching_No
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_GateWay
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_ServerIP
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_SelfMASK
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_SelfMAC
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_SelfIP
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_Pile_No
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_Maching_No
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_GateWay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_uart1
</UL>

<P><STRONG><a name="[cd]"></a>CountPenalty</STRONG> (Thumb, 1304 bytes, Stack size 24 bytes, qr_encode.o(i.CountPenalty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CountPenalty
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
</UL>

<P><STRONG><a name="[7a]"></a>DisplayChargeEndInfo</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, lcd.o(i.DisplayChargeEndInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DisplayChargeEndInfo &rArr; T6963_DisplayEng16A &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspdatchg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayEng16A
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayEng16
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayCHN16n
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainDispClr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32tobcd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte2bcd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTask
</UL>

<P><STRONG><a name="[8b]"></a>DisplayChargeError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd.o(i.DisplayChargeError))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTask
</UL>

<P><STRONG><a name="[82]"></a>DisplayChargeInfo</STRONG> (Thumb, 534 bytes, Stack size 96 bytes, lcd.o(i.DisplayChargeInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = DisplayChargeInfo &rArr; T6963_DisplayEng16A &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspdatchg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayEng16A
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayEng16
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayCHN16n
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainDispClr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32tobcd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8to2bcd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2bcd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte2bcd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcdtwo2bcdone
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTask
</UL>

<P><STRONG><a name="[86]"></a>DisplayOpenButton</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd.o(i.DisplayOpenButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = DisplayOpenButton &rArr; T6963_DisplayCHN24n &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayCHN24n
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Station_Charge_deal
</UL>

<P><STRONG><a name="[3f]"></a>DisplayTask</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, main.o(i.DisplayTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = DisplayTask &rArr; dspstandbypage &rArr; dspQR_Code &rArr; T6963_DispQR_Code &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspstandbypage
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspTimeAndIcon
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_GUN_Insert
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeInfo
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeError
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeEndInfo
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.mainTask)
</UL>
<P><STRONG><a name="[8a]"></a>Display_GUN_Insert</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, lcd.o(i.Display_GUN_Insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Display_GUN_Insert &rArr; T6963_DisplayEng16A &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspdatchg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayEng16A
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayCHN16n
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainDispClr
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte2bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTask
</UL>

<P><STRONG><a name="[59]"></a>DspJQFHerr</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lcd.o(i.DspJQFHerr))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authtic_Deal_With
</UL>

<P><STRONG><a name="[8c]"></a>EncodeData</STRONG> (Thumb, 802 bytes, Stack size 88 bytes, qr_encode.o(i.EncodeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = EncodeData &rArr; GetEncodeVersion &rArr; EncodeSourceData &rArr; SetBitStream
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitStream
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRSCodeWord
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncodeVersion
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[93]"></a>EncodeSourceData</STRONG> (Thumb, 1940 bytes, Stack size 72 bytes, qr_encode.o(i.EncodeSourceData))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EncodeSourceData &rArr; SetBitStream
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitStream
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KanjiToBinaly
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNumeralData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKanjiData
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAlphabetData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBitLength
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlphabetToBinaly
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncodeVersion
</UL>

<P><STRONG><a name="[9a]"></a>Ethernet_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ethernet.o(i.Ethernet_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Ethernet_Init &rArr; iinchip_init &rArr; setMR &rArr; IINCHIP_WRITE &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask
</UL>

<P><STRONG><a name="[9c]"></a>Ethernet_Work</STRONG> (Thumb, 462 bytes, Stack size 16 bytes, ethernet.o(i.Ethernet_Work))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Ethernet_Work &rArr; Sent_StrateChargeInfo_Frame &rArr; send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putISR
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_SR
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_StrateChargeInfo_Frame
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_OnlineChargeInfo_Frame
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_Login_Frame
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_Heart_Frame
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104DataAnalysis
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask
</UL>

<P><STRONG><a name="[a6]"></a>Ethernet_config</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ethernet.o(i.Ethernet_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Ethernet_config &rArr; socket &rArr; close &rArr; IINCHIP_READ &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSIPR
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGAR
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSn_DIPR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSUBR
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSIPR
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSHAR
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRCR
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIMR
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGAR
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask
</UL>

<P><STRONG><a name="[b3]"></a>Ethrenet_Connecting</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ethernet.o(i.Ethrenet_Connecting))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Ethrenet_Connecting &rArr; connect &rArr; clearSUBR &rArr; getSIPR &rArr; IINCHIP_READ &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putISR
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_SR
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask
</UL>

<P><STRONG><a name="[b6]"></a>ExRTCInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rtc.o(i.ExRTCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ExRTCInit &rArr; PCF8563_Set_Timer &rArr; I2C_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set_Timer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SS
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_INT_State
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_rtc
</UL>

<P><STRONG><a name="[bb]"></a>ExRTCSet</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtc.o(i.ExRTCSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ExRTCSet &rArr; PCF8563_Set_Timer &rArr; I2C_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set_Timer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SS
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_INT_State
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sys_Time
</UL>

<P><STRONG><a name="[67]"></a>F104_INF_PACK</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, ptl104.o(i.F104_INF_PACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = F104_INF_PACK &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_StrateChargeInfo_Frame
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_Rsettime
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_OnlineChargeInfo_Frame
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRemoteCtrlAsk
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Call_Over
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Call_Ack
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_State_Ack
</UL>

<P><STRONG><a name="[bc]"></a>F104_JFCLCDQK_UP_PACK</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ptl104.o(i.F104_JFCLCDQK_UP_PACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = F104_JFCLCDQK_UP_PACK &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_StrateChargeInfo_Frame
</UL>

<P><STRONG><a name="[10a]"></a>F104_LOGIN_PACK</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ptl104.o(i.F104_LOGIN_PACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = F104_LOGIN_PACK
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_Login_Frame
</UL>

<P><STRONG><a name="[bd]"></a>F104_ZXSJSJ_PACK</STRONG> (Thumb, 608 bytes, Stack size 16 bytes, ptl104.o(i.F104_ZXSJSJ_PACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = F104_ZXSJSJ_PACK &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_OnlineChargeInfo_Frame
</UL>

<P><STRONG><a name="[66]"></a>F104_ZZHSJ_PACK</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, ptl104.o(i.F104_ZZHSJ_PACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = F104_ZZHSJ_PACK &rArr; dbcd2hex16
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbcd2hex16
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_State_Ack
</UL>

<P><STRONG><a name="[c1]"></a>FMReadByte</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fm1702.o(i.FMReadByte))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMRead
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramState
</UL>

<P><STRONG><a name="[c0]"></a>FMSendByte</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm1702.o(i.FMSendByte))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMRead
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMWrite
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramState
</UL>

<P><STRONG><a name="[62]"></a>FRAMRead</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fram.o(i.FRAMRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FRAMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddelay
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSendByte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_JFCLSJ
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStrategyMeterKwh
</UL>

<P><STRONG><a name="[c2]"></a>FRAMWrite</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, fram.o(i.FRAMWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = FRAMWrite &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddelay
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSendByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramState
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveZXJYLSH
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_ServerIP
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SelfMASK
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SelfMAC
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SelfIP
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Pile_No
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Maching_No
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_GateWay
</UL>

<P><STRONG><a name="[c4]"></a>FSMC_ReadStatus</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, t6963.o(i.FSMC_ReadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_AutoWrite
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_RWCheck
</UL>

<P><STRONG><a name="[c6]"></a>FSMC_WriteCMD</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, t6963.o(i.FSMC_WriteCMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = FSMC_WriteCMD
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtdat2fio2pin0
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD0
</UL>

<P><STRONG><a name="[c8]"></a>FSMC_WriteData</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, t6963.o(i.FSMC_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = FSMC_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtdat2fio2pin0
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_AutoWrite
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteData
</UL>

<P><STRONG><a name="[92]"></a>FormatModule</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, qr_encode.o(i.FormatModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FormatModule &rArr; SetFunctionModule &rArr; SetFinderPattern
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMaskingPattern
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFunctionModule
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFormatInfoPattern
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCodeWordPattern
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountPenalty
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
</UL>

<P><STRONG><a name="[c3]"></a>FramState</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, fram.o(i.FramState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FramState
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddelay
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSendByte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMWrite
</UL>

<P><STRONG><a name="[145]"></a>FrameCheck_645_2007</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, dl645a.o(i.FrameCheck_645_2007))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FrameCheck_645_2007
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_rs232
</UL>

<P><STRONG><a name="[143]"></a>FramePack_645_2007</STRONG> (Thumb, 178 bytes, Stack size 28 bytes, dl645a.o(i.FramePack_645_2007))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FramePack_645_2007
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_rs232
</UL>

<P><STRONG><a name="[ce]"></a>GPIO_ClearValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(i.GPIO_ClearValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputValue
</UL>

<P><STRONG><a name="[d0]"></a>GPIO_OutputValue</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(i.GPIO_OutputValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[d2]"></a>GPIO_SetDir</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc177x_8x_gpio.o(i.GPIO_SetDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_init
</UL>

<P><STRONG><a name="[d1]"></a>GPIO_SetValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(i.GPIO_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputValue
</UL>

<P><STRONG><a name="[97]"></a>GetBitLength</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, qr_encode.o(i.GetBitLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetBitLength
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[8e]"></a>GetEncodeVersion</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, qr_encode.o(i.GetEncodeVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = GetEncodeVersion &rArr; EncodeSourceData &rArr; SetBitStream
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
</UL>

<P><STRONG><a name="[91]"></a>GetRSCodeWord</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, qr_encode.o(i.GetRSCodeWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetRSCodeWord
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
</UL>

<P><STRONG><a name="[13a]"></a>GolbalVarInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, global.o(i.GolbalVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[15]"></a>I2C1_IRQHandler</STRONG> (Thumb, 506 bytes, Stack size 0 bytes, it_isr.o(i.I2C1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>I2C_ReadNByte</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, hardware_interface.o(i.I2C_ReadNByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_ReadNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_I2c_End
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_INT_State
</UL>

<P><STRONG><a name="[d5]"></a>I2C_WriteNByte</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, hardware_interface.o(i.I2C_WriteNByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_I2c_End
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set_Timer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SS
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_INT_State
</UL>

<P><STRONG><a name="[d6]"></a>IINCHIP_READ</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, w5100.o(i.IINCHIP_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IINCHIP_READ &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputValue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Hardeare_SendData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Hardeare_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_SR
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSIPR
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGAR
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Process
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_processing
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
</UL>

<P><STRONG><a name="[d9]"></a>IINCHIP_WRITE</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, w5100.o(i.IINCHIP_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IINCHIP_WRITE &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputValue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Hardeare_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Process
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSn_DIPR
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSIPR
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSHAR
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRCR
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIMR
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGAR
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMR
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_processing
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSUBR
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applySUBR
</UL>

<P><STRONG><a name="[da]"></a>ISR_Process</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, w5100.o(i.ISR_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ISR_Process &rArr; IINCHIP_READ &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask
</UL>

<P><STRONG><a name="[96]"></a>IsAlphabetData</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, qr_encode.o(i.IsAlphabetData))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[94]"></a>IsKanjiData</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, qr_encode.o(i.IsKanjiData))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[95]"></a>IsNumeralData</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, qr_encode.o(i.IsNumeralData))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[99]"></a>KanjiToBinaly</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, qr_encode.o(i.KanjiToBinaly))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[7b]"></a>MainDispClr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, t6963.o(i.MainDispClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = MainDispClr &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_SetAddressPointer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_AutoWrite
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD0
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_GUN_Insert
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeInfo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeEndInfo
</UL>

<P><STRONG><a name="[142]"></a>MeterParaInit</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, rs232.o(i.MeterParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MeterParaInit
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_rs232
</UL>

<P><STRONG><a name="[3c]"></a>NetTask</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, main.o(i.NetTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = NetTask &rArr; Ethernet_Work &rArr; Sent_StrateChargeInfo_Frame &rArr; send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getISR
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Process
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethrenet_Connecting
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Work
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.mainTask)
</UL>
<P><STRONG><a name="[df]"></a>OSInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>OSInitHookBegin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[ea]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[eb]"></a>OSIntExit</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ed]"></a>OSStart</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[ef]"></a>OSTaskCreate</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>OSTaskCreateExt</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[f8]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[f9]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[fa]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[f0]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[36]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(UCOSII_ASM)
</UL>
<P><STRONG><a name="[5a]"></a>OSTimeDly</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authtic_Deal_With
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_uart1
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_rs232
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_config
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCardTask
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTask
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMWrite
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2SendStr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStrategyMeterKwh
</UL>

<P><STRONG><a name="[f4]"></a>OSTimeTick</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f5]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[e5]"></a>OS_FlagInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[e6]"></a>OS_MemInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, os_mem.o(i.OS_MemInit))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[e7]"></a>OS_QInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_QInit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[f2]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[f1]"></a>OS_TCBInit</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[37]"></a>OS_TaskIdle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[38]"></a>OS_TaskStat</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskStat)
</UL>
<P><STRONG><a name="[ba]"></a>PCF8563_INT_State</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, pcf8563.o(i.PCF8563_INT_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PCF8563_INT_State &rArr; I2C_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteNByte
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExRTCSet
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExRTCInit
</UL>

<P><STRONG><a name="[fb]"></a>PCF8563_Read</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, pcf8563.o(i.PCF8563_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PCF8563_Read &rArr; I2C_ReadNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_rtc
</UL>

<P><STRONG><a name="[b7]"></a>PCF8563_SS</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pcf8563.o(i.PCF8563_SS))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PCF8563_SS &rArr; I2C_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExRTCSet
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExRTCInit
</UL>

<P><STRONG><a name="[b8]"></a>PCF8563_Set</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, pcf8563.o(i.PCF8563_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PCF8563_Set &rArr; I2C_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExRTCSet
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExRTCInit
</UL>

<P><STRONG><a name="[b9]"></a>PCF8563_Set_Timer</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, pcf8563.o(i.PCF8563_Set_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PCF8563_Set_Timer &rArr; I2C_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExRTCSet
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExRTCInit
</UL>

<P><STRONG><a name="[a0]"></a>PTL104DataAnalysis</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, ethernet.o(i.PTL104DataAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = PTL104DataAnalysis &rArr;  PTL104DataAnalysis (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sys_Time
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_S_Ack
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_Rsettime
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_RACTIVE
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Charge_Strategy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlFrameDeal
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayForDile
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104DataAnalysis
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authtic_Deal_With
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Answer_R_Call
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104DataAnalysis
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Work
</UL>

<P><STRONG><a name="[58]"></a>PTL104_JQXXWithOrderAndLogicNumber_unpack</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, ptl104.o(i.PTL104_JQXXWithOrderAndLogicNumber_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PTL104_JQXXWithOrderAndLogicNumber_unpack &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authtic_Deal_With
</UL>

<P><STRONG><a name="[57]"></a>PTL104_JQXXWithOrder_unpack</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, ptl104.o(i.PTL104_JQXXWithOrder_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PTL104_JQXXWithOrder_unpack &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authtic_Deal_With
</UL>

<P><STRONG><a name="[103]"></a>PTL104_KKXX_With_LogicNumber_unpack</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, ptl104.o(i.PTL104_KKXX_With_LogicNumber_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PTL104_KKXX_With_LogicNumber_unpack &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayForDile
</UL>

<P><STRONG><a name="[104]"></a>Packet_Send_232Frame</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, uart1.o(i.Packet_Send_232Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Packet_Send_232Frame &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_ServerIP
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_SelfMASK
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_SelfMAC
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_SelfIP
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_Pile_No
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_Maching_No
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_GateWay
</UL>

<P><STRONG><a name="[6e]"></a>Packet_Send_GateWay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart1.o(i.Packet_Send_GateWay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Packet_Send_GateWay &rArr; Packet_Send_232Frame &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_232Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[6c]"></a>Packet_Send_Maching_No</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart1.o(i.Packet_Send_Maching_No))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Packet_Send_Maching_No &rArr; Packet_Send_232Frame &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_232Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[6b]"></a>Packet_Send_Pile_No</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart1.o(i.Packet_Send_Pile_No))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Packet_Send_Pile_No &rArr; Packet_Send_232Frame &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_232Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[6f]"></a>Packet_Send_SelfIP</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart1.o(i.Packet_Send_SelfIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Packet_Send_SelfIP &rArr; Packet_Send_232Frame &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_232Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[71]"></a>Packet_Send_SelfMAC</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart1.o(i.Packet_Send_SelfMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Packet_Send_SelfMAC &rArr; Packet_Send_232Frame &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_232Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[70]"></a>Packet_Send_SelfMASK</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart1.o(i.Packet_Send_SelfMASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Packet_Send_SelfMASK &rArr; Packet_Send_232Frame &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_232Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[6d]"></a>Packet_Send_ServerIP</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart1.o(i.Packet_Send_ServerIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Packet_Send_ServerIP &rArr; Packet_Send_232Frame &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_Send_232Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[100]"></a>PayForDile</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ethernet.o(i.PayForDile))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PayForDile &rArr; PTL104_KKXX_With_LogicNumber_unpack &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104_KKXX_With_LogicNumber_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104DataAnalysis
</UL>

<P><STRONG><a name="[3d]"></a>RFCardTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.RFCardTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = RFCardTask &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.mainTask)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, it_isr.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>R_Call_Ack</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, ethernet.o(i.R_Call_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = R_Call_Ack &rArr; send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F104_INF_PACK
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Answer_R_Call
</UL>

<P><STRONG><a name="[55]"></a>R_Call_Over</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, ethernet.o(i.R_Call_Over))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = R_Call_Over &rArr; send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F104_INF_PACK
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Answer_R_Call
</UL>

<P><STRONG><a name="[fd]"></a>RemoteCtrlFrameDeal</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ethernet.o(i.RemoteCtrlFrameDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RemoteCtrlFrameDeal &rArr; SendRemoteCtrlAsk &rArr; send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_CHG_JSSJ
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRemoteCtrlAsk
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmDb1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104DataAnalysis
</UL>

<P><STRONG><a name="[76]"></a>Reset_GateWay</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart1.o(i.Reset_GateWay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Reset_GateWay &rArr; FRAMWrite &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMWrite
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResetSucessFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[74]"></a>Reset_Maching_No</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart1.o(i.Reset_Maching_No))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Reset_Maching_No &rArr; FRAMWrite &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMWrite
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResetSucessFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[73]"></a>Reset_Pile_No</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart1.o(i.Reset_Pile_No))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Reset_Pile_No &rArr; FRAMWrite &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMWrite
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResetSucessFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[77]"></a>Reset_SelfIP</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart1.o(i.Reset_SelfIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Reset_SelfIP &rArr; FRAMWrite &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMWrite
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResetSucessFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[79]"></a>Reset_SelfMAC</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart1.o(i.Reset_SelfMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Reset_SelfMAC &rArr; FRAMWrite &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMWrite
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResetSucessFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[78]"></a>Reset_SelfMASK</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart1.o(i.Reset_SelfMASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Reset_SelfMASK &rArr; FRAMWrite &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMWrite
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResetSucessFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[75]"></a>Reset_ServerIP</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uart1.o(i.Reset_ServerIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Reset_ServerIP &rArr; FRAMWrite &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMWrite
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResetSucessFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[5e]"></a>SET_CHG_JSSJ</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, ptl104.o(i.SET_CHG_JSSJ))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlFrameDeal
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_Pin_Dector
</UL>

<P><STRONG><a name="[110]"></a>SET_CHG_KSSJ</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, ptl104.o(i.SET_CHG_KSSJ))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Station_Charge_deal
</UL>

<P><STRONG><a name="[107]"></a>SET_JFCLSJ</STRONG> (Thumb, 172 bytes, Stack size 112 bytes, ptl104.o(i.SET_JFCLSJ))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SET_JFCLSJ &rArr; FRAMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMRead
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_StrateChargeInfo_Frame
</UL>

<P><STRONG><a name="[108]"></a>SET_ZXTZSJ</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, ptl104.o(i.SET_ZXTZSJ))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SET_ZXTZSJ &rArr; SaveZXJYLSH &rArr; FRAMWrite &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2bcd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveZXJYLSH
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_OnlineChargeInfo_Frame
</UL>

<P><STRONG><a name="[135]"></a>SSP0_Init</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, hardware_interface.o(i.SSP0_Init))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>SSP1_Init</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, hardware_interface.o(i.SSP1_Init))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>SSP_Hardeare_ReceiveData</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hardware_interface.o(i.SSP_Hardeare_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[d7]"></a>SSP_Hardeare_SendData</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hardware_interface.o(i.SSP_Hardeare_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[109]"></a>SaveZXJYLSH</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ptl104.o(i.SaveZXJYLSH))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = SaveZXJYLSH &rArr; FRAMWrite &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ZXTZSJ
</UL>

<P><STRONG><a name="[101]"></a>Save_Charge_Strategy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ethernet.o(i.Save_Charge_Strategy))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104DataAnalysis
</UL>

<P><STRONG><a name="[105]"></a>SendRemoteCtrlAsk</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, ethernet.o(i.SendRemoteCtrlAsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SendRemoteCtrlAsk &rArr; send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F104_INF_PACK
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlFrameDeal
</UL>

<P><STRONG><a name="[106]"></a>SendResetSucessFrame</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, uart1.o(i.SendResetSucessFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendResetSucessFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_ServerIP
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SelfMASK
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SelfMAC
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SelfIP
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Pile_No
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Maching_No
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_GateWay
</UL>

<P><STRONG><a name="[a3]"></a>Sent_Heart_Frame</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ethernet.o(i.Sent_Heart_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Sent_Heart_Frame &rArr; send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Work
</UL>

<P><STRONG><a name="[a2]"></a>Sent_Login_Frame</STRONG> (Thumb, 34 bytes, Stack size 48 bytes, ethernet.o(i.Sent_Login_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Sent_Login_Frame &rArr; send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F104_LOGIN_PACK
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Work
</UL>

<P><STRONG><a name="[a5]"></a>Sent_OnlineChargeInfo_Frame</STRONG> (Thumb, 70 bytes, Stack size 272 bytes, ethernet.o(i.Sent_OnlineChargeInfo_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = Sent_OnlineChargeInfo_Frame &rArr; send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ZXTZSJ
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F104_ZXSJSJ_PACK
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F104_INF_PACK
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Work
</UL>

<P><STRONG><a name="[fc]"></a>Sent_RACTIVE</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ethernet.o(i.Sent_RACTIVE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Sent_RACTIVE &rArr; send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104DataAnalysis
</UL>

<P><STRONG><a name="[ff]"></a>Sent_Rsettime</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, ethernet.o(i.Sent_Rsettime))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Sent_Rsettime &rArr; send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F104_INF_PACK
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104DataAnalysis
</UL>

<P><STRONG><a name="[102]"></a>Sent_S_Ack</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ethernet.o(i.Sent_S_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Sent_S_Ack &rArr; send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104DataAnalysis
</UL>

<P><STRONG><a name="[a4]"></a>Sent_StrateChargeInfo_Frame</STRONG> (Thumb, 72 bytes, Stack size 272 bytes, ethernet.o(i.Sent_StrateChargeInfo_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = Sent_StrateChargeInfo_Frame &rArr; send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_JFCLSJ
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F104_JFCLCDQK_UP_PACK
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F104_INF_PACK
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Work
</UL>

<P><STRONG><a name="[10d]"></a>SetAlignmentPattern</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, qr_encode.o(i.SetAlignmentPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetAlignmentPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFunctionModule
</UL>

<P><STRONG><a name="[8f]"></a>SetBitStream</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, qr_encode.o(i.SetBitStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetBitStream
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[ca]"></a>SetCodeWordPattern</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, qr_encode.o(i.SetCodeWordPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetCodeWordPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
</UL>

<P><STRONG><a name="[10b]"></a>SetFinderPattern</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, qr_encode.o(i.SetFinderPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetFinderPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFunctionModule
</UL>

<P><STRONG><a name="[cc]"></a>SetFormatInfoPattern</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, qr_encode.o(i.SetFormatInfoPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetFormatInfoPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
</UL>

<P><STRONG><a name="[c9]"></a>SetFunctionModule</STRONG> (Thumb, 440 bytes, Stack size 12 bytes, qr_encode.o(i.SetFunctionModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetFunctionModule &rArr; SetFinderPattern
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVersionPattern
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFinderPattern
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlignmentPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
</UL>

<P><STRONG><a name="[cb]"></a>SetMaskingPattern</STRONG> (Thumb, 404 bytes, Stack size 20 bytes, qr_encode.o(i.SetMaskingPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetMaskingPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
</UL>

<P><STRONG><a name="[10c]"></a>SetVersionPattern</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, qr_encode.o(i.SetVersionPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetVersionPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFunctionModule
</UL>

<P><STRONG><a name="[fe]"></a>Set_Sys_Time</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ethernet.o(i.Set_Sys_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = Set_Sys_Time &rArr; ExRTCSet &rArr; PCF8563_Set_Timer &rArr; I2C_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExRTCSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTL104DataAnalysis
</UL>

<P><STRONG><a name="[13e]"></a>Station_Authtic_deal</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, charge_station_deal.o(i.Station_Authtic_deal))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[13f]"></a>Station_ChargeEND_deal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, charge_station_deal.o(i.Station_ChargeEND_deal))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[140]"></a>Station_ChargeError_deal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, charge_station_deal.o(i.Station_ChargeError_deal))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[10f]"></a>Station_Charge_deal</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, charge_station_deal.o(i.Station_Charge_deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Station_Charge_deal &rArr; DisplayOpenButton &rArr; T6963_DisplayCHN24n &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOpenButton
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_CHG_KSSJ
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[13d]"></a>Station_Connect_deal</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, charge_station_deal.o(i.Station_Connect_deal))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[13c]"></a>Station_Idle_deal</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, charge_station_deal.o(i.Station_Idle_deal))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_cpu_c.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SystemInit</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, system_lpc177x_8x.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(.text)
</UL>
<P><STRONG><a name="[111]"></a>SystemParaInit</STRONG> (Thumb, 450 bytes, Stack size 8 bytes, global.o(i.SystemParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemParaInit &rArr; FRAMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMRead
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[dd]"></a>T6963_AutoWrite</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, t6963.o(i.T6963_AutoWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = T6963_AutoWrite &rArr; FSMC_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_WriteData
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DispQR_Code
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DispPic
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainDispClr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_LCDClear
</UL>

<P><STRONG><a name="[112]"></a>T6963_DispPic</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, t6963.o(i.T6963_DispPic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = T6963_DispPic &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_SetAddressPointer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_AutoWrite
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD0
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspstandbypage
</UL>

<P><STRONG><a name="[113]"></a>T6963_DispQR_Code</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, t6963.o(i.T6963_DispQR_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = T6963_DispQR_Code &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_SetAddressPointer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_AutoWrite
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD0
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspQR_Code
</UL>

<P><STRONG><a name="[7c]"></a>T6963_DisplayCHN16n</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, t6963.o(i.T6963_DisplayCHN16n))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = T6963_DisplayCHN16n &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteDispData
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_SetAddressPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspTimeAndIcon
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_GUN_Insert
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeInfo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeEndInfo
</UL>

<P><STRONG><a name="[115]"></a>T6963_DisplayCHN16nA</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, t6963.o(i.T6963_DisplayCHN16nA))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = T6963_DisplayCHN16nA &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteDispData
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_SetAddressPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspTermSn
</UL>

<P><STRONG><a name="[87]"></a>T6963_DisplayCHN24n</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, t6963.o(i.T6963_DisplayCHN24n))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = T6963_DisplayCHN24n &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteDispData
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_SetAddressPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOpenButton
</UL>

<P><STRONG><a name="[81]"></a>T6963_DisplayEng16</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, t6963.o(i.T6963_DisplayEng16))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = T6963_DisplayEng16 &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_SetAddressPointer
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD0
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspTermSn
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspTimeAndIcon
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeInfo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeEndInfo
</UL>

<P><STRONG><a name="[7f]"></a>T6963_DisplayEng16A</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, t6963.o(i.T6963_DisplayEng16A))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = T6963_DisplayEng16A &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_SetAddressPointer
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD0
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_GUN_Insert
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeInfo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeEndInfo
</UL>

<P><STRONG><a name="[117]"></a>T6963_Init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, t6963.o(i.T6963_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = T6963_Init &rArr; T6963_LCDClear &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_LCDReset
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_LCDClear
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD0
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[11a]"></a>T6963_LCDClear</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, t6963.o(i.T6963_LCDClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = T6963_LCDClear &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_SetAddressPointer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_AutoWrite
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD0
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_Init
</UL>

<P><STRONG><a name="[118]"></a>T6963_LCDReset</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, t6963.o(i.T6963_LCDReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = T6963_LCDReset &rArr; Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_Init
</UL>

<P><STRONG><a name="[11c]"></a>T6963_Line</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, t6963.o(i.T6963_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = T6963_Line &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_SetBit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_SetAddressPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspTermSn
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspTimeAndIcon
</UL>

<P><STRONG><a name="[db]"></a>T6963_SetAddressPointer</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, t6963.o(i.T6963_SetAddressPointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD2
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_Line
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayEng16A
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayEng16
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayCHN24n
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayCHN16nA
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayCHN16n
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DispQR_Code
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DispPic
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainDispClr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_LCDClear
</UL>

<P><STRONG><a name="[11e]"></a>T6963_SetBit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, t6963.o(i.T6963_SetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = T6963_SetBit &rArr; T6963_WriteCMD0 &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD0
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_Line
</UL>

<P><STRONG><a name="[114]"></a>T6963_WriteDispData</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, t6963.o(i.T6963_WriteDispData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = T6963_WriteDispData &rArr; T6963_WriteCMD1 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD1
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayCHN24n
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayCHN16nA
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayCHN16n
</UL>

<P><STRONG><a name="[12f]"></a>Turn_QR_Code</STRONG> (Thumb, 308 bytes, Stack size 60 bytes, lcd.o(i.Turn_QR_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Turn_QR_Code
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspQR_Code
</UL>

<P><STRONG><a name="[121]"></a>UART1Init</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, uart1.o(i.UART1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1Init &rArr; UART1RxbufClear
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1RxbufClear
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_uart1
</UL>

<P><STRONG><a name="[122]"></a>UART1RxbufClear</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart1.o(i.UART1RxbufClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1RxbufClear
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_uart1
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SendStr
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[123]"></a>UART1SendByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart1.o(i.UART1SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SendStr
</UL>

<P><STRONG><a name="[72]"></a>UART1SendStr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uart1.o(i.UART1SendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART1SendStr &rArr; UART1RxbufClear
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SendByte
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1RxbufClear
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, uart1.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART1_IRQHandler &rArr; UART1RxbufClear
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1RxbufClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART2_IRQHandler</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, rs232.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART2_IRQHandler &rArr; Uart2RxbufClear
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2RxbufClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>Uart2RxbufClear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rs232.o(i.Uart2RxbufClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart2RxbufClear
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_rs232
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2SendStr
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[3e]"></a>Uart485_E_M_Task</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.Uart485_E_M_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Uart485_E_M_Task &rArr; main_rs232 &rArr; ChargeStrategyMeterKwh &rArr; FRAMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_rs232
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.mainTask)
</UL>
<P><STRONG><a name="[3b]"></a>UartCfgTask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.UartCfgTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = UartCfgTask &rArr; main_uart1 &rArr; CommandProcess &rArr; Reset_ServerIP &rArr; FRAMWrite &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_uart1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.mainTask)
</UL>
<P><STRONG><a name="[d4]"></a>Wait_I2c_End</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, hardware_interface.o(i.Wait_I2c_End))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteNByte
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadNByte
</UL>

<P><STRONG><a name="[127]"></a>__0sprintf$6</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[169]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[131]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspTimeAndIcon
</UL>

<P><STRONG><a name="[16a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[16b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[16c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[12c]"></a>applySUBR</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, w5100.o(i.applySUBR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = applySUBR &rArr; IINCHIP_WRITE &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSUBR
</UL>

<P><STRONG><a name="[83]"></a>bcdtwo2bcdone</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lcd.o(i.bcdtwo2bcdone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bcdtwo2bcdone
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspTermSn
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeInfo
</UL>

<P><STRONG><a name="[7d]"></a>byte2bcd</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lcd.o(i.byte2bcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = byte2bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_GUN_Insert
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeInfo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeEndInfo
</UL>

<P><STRONG><a name="[12d]"></a>clearSUBR</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, w5100.o(i.clearSUBR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = clearSUBR &rArr; getSIPR &rArr; IINCHIP_READ &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSIPR
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[b5]"></a>close</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, socket.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = close &rArr; IINCHIP_READ &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethrenet_Connecting
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[b4]"></a>connect</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, socket.o(i.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = connect &rArr; clearSUBR &rArr; getSIPR &rArr; IINCHIP_READ &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSUBR
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applySUBR
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethrenet_Connecting
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask
</UL>

<P><STRONG><a name="[be]"></a>dbcd2hex16</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ptl104.o(i.dbcd2hex16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dbcd2hex16
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F104_ZZHSJ_PACK
</UL>

<P><STRONG><a name="[bf]"></a>ddelay</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm1702.o(i.ddelay))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMRead
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMWrite
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramState
</UL>

<P><STRONG><a name="[12e]"></a>dspQR_Code</STRONG> (Thumb, 68 bytes, Stack size 1784 bytes, lcd.o(i.dspQR_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = dspQR_Code &rArr; T6963_DispQR_Code &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DispQR_Code
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_QR_Code
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspstandbypage
</UL>

<P><STRONG><a name="[130]"></a>dspTermSn</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, lcd.o(i.dspTermSn))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dspTermSn &rArr; T6963_Line &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_Line
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayEng16
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayCHN16nA
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcdtwo2bcdone
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspTimeAndIcon
</UL>

<P><STRONG><a name="[88]"></a>dspTimeAndIcon</STRONG> (Thumb, 346 bytes, Stack size 88 bytes, lcd.o(i.dspTimeAndIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = dspTimeAndIcon &rArr; dspTermSn &rArr; T6963_Line &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_Line
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayEng16
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayCHN16n
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspTermSn
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspstandbypage
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTask
</UL>

<P><STRONG><a name="[7e]"></a>dspdatchg</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, t6963.o(i.dspdatchg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dspdatchg &rArr; dspdelzero
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspdelzero
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_GUN_Insert
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeInfo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeEndInfo
</UL>

<P><STRONG><a name="[132]"></a>dspdelzero</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, t6963.o(i.dspdelzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dspdelzero
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspdatchg
</UL>

<P><STRONG><a name="[89]"></a>dspstandbypage</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd.o(i.dspstandbypage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = dspstandbypage &rArr; dspQR_Code &rArr; T6963_DispQR_Code &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DispPic
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspQR_Code
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspTimeAndIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTask
</UL>

<P><STRONG><a name="[a8]"></a>getGAR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, w5100.o(i.getGAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getGAR &rArr; IINCHIP_READ &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_config
</UL>

<P><STRONG><a name="[14a]"></a>getIINCHIP_RxBASE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, w5100.o(i.getIINCHIP_RxBASE))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>

<P><STRONG><a name="[149]"></a>getIINCHIP_RxMASK</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, w5100.o(i.getIINCHIP_RxMASK))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>

<P><STRONG><a name="[14b]"></a>getIINCHIP_RxMAX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, w5100.o(i.getIINCHIP_RxMAX))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>

<P><STRONG><a name="[154]"></a>getIINCHIP_TxBASE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, w5100.o(i.getIINCHIP_TxBASE))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>

<P><STRONG><a name="[153]"></a>getIINCHIP_TxMASK</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, w5100.o(i.getIINCHIP_TxMASK))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>

<P><STRONG><a name="[14e]"></a>getIINCHIP_TxMAX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, w5100.o(i.getIINCHIP_TxMAX))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>

<P><STRONG><a name="[de]"></a>getISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, w5100.o(i.getISR))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask
</UL>

<P><STRONG><a name="[ac]"></a>getSIPR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, w5100.o(i.getSIPR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getSIPR &rArr; IINCHIP_READ &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_config
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSUBR
</UL>

<P><STRONG><a name="[9e]"></a>getSn_RX_RSR</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, w5100.o(i.getSn_RX_RSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = getSn_RX_RSR &rArr; IINCHIP_READ &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Work
</UL>

<P><STRONG><a name="[9d]"></a>getSn_SR</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, w5100.o(i.getSn_SR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getSn_SR &rArr; IINCHIP_READ &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethrenet_Connecting
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Work
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[133]"></a>getSn_TX_FSR</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, w5100.o(i.getSn_TX_FSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = getSn_TX_FSR &rArr; IINCHIP_READ &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[84]"></a>hex2bcd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcd.o(i.hex2bcd))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ZXTZSJ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeInfo
</UL>

<P><STRONG><a name="[137]"></a>i2c1Init</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, hardware_interface.o(i.i2c1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>iinchip_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, w5100.o(i.iinchip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iinchip_init &rArr; setMR &rArr; IINCHIP_WRITE &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMR
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_rtc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Relay_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[3a]"></a>mainTask</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, main.o(i.mainTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984 + Unknown Stack Size
<LI>Call Chain = mainTask &rArr; dspstandbypage &rArr; dspQR_Code &rArr; T6963_DispQR_Code &rArr; T6963_SetAddressPointer &rArr; T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmDb1Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspstandbypage
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Station_Idle_deal
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Station_Connect_deal
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Station_Charge_deal
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Station_ChargeError_deal
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Station_ChargeEND_deal
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Station_Authtic_deal
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GolbalVarInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_Pin_Dector
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[125]"></a>main_rs232</STRONG> (Thumb, 858 bytes, Stack size 32 bytes, rs232.o(i.main_rs232))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = main_rs232 &rArr; ChargeStrategyMeterKwh &rArr; FRAMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramePack_645_2007
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameCheck_645_2007
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2SendStr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndbcdstr2u32
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2RxbufClear
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterParaInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDataBuffer
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStrategyMeterKwh
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_E_M_Task
</UL>

<P><STRONG><a name="[139]"></a>main_rtc</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rtc.o(i.main_rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = main_rtc &rArr; ExRTCInit &rArr; PCF8563_Set_Timer &rArr; I2C_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExRTCInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>main_uart1</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, uart1.o(i.main_uart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = main_uart1 &rArr; CommandProcess &rArr; Reset_ServerIP &rArr; FRAMWrite &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1RxbufClear
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum0904
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCfgTask
</UL>

<P><STRONG><a name="[146]"></a>ndbcdstr2u32</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rs232.o(i.ndbcdstr2u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ndbcdstr2u32
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_rs232
</UL>

<P><STRONG><a name="[a1]"></a>putISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, w5100.o(i.putISR))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethrenet_Connecting
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Work
</UL>

<P><STRONG><a name="[5d]"></a>pwmDb1Init</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, relay.o(i.pwmDb1Init))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlFrameDeal
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_Pin_Dector
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[148]"></a>read_data</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, w5100.o(i.read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_data &rArr; wiz_read_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_RxMAX
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_RxMASK
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_RxBASE
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_processing
</UL>

<P><STRONG><a name="[9f]"></a>recv</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, socket.o(i.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = recv &rArr; recv_data_processing &rArr; read_data &rArr; wiz_read_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_processing
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Work
</UL>

<P><STRONG><a name="[14d]"></a>recv_data_processing</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, w5100.o(i.recv_data_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = recv_data_processing &rArr; read_data &rArr; wiz_read_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[10e]"></a>rtcInit</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, rtc.o(i.rtcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = rtcInit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sys_Time
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_rtc
</UL>

<P><STRONG><a name="[68]"></a>send</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, socket.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_SR
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_TxMAX
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_StrateChargeInfo_Frame
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_S_Ack
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_Rsettime
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_RACTIVE
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_OnlineChargeInfo_Frame
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_Login_Frame
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sent_Heart_Frame
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRemoteCtrlAsk
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Call_Over
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Call_Ack
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_State_Ack
</UL>

<P><STRONG><a name="[14f]"></a>send_data_processing</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, w5100.o(i.send_data_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[a7]"></a>setGAR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, w5100.o(i.setGAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setGAR &rArr; IINCHIP_WRITE &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_config
</UL>

<P><STRONG><a name="[b0]"></a>setIMR</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, w5100.o(i.setIMR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setIMR &rArr; IINCHIP_WRITE &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_config
</UL>

<P><STRONG><a name="[134]"></a>setMR</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, w5100.o(i.setMR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setMR &rArr; IINCHIP_WRITE &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_init
</UL>

<P><STRONG><a name="[af]"></a>setRCR</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, w5100.o(i.setRCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setRCR &rArr; IINCHIP_WRITE &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_config
</UL>

<P><STRONG><a name="[ae]"></a>setRTR</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, w5100.o(i.setRTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setRTR &rArr; IINCHIP_WRITE &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_config
</UL>

<P><STRONG><a name="[aa]"></a>setSHAR</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, w5100.o(i.setSHAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setSHAR &rArr; IINCHIP_WRITE &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_config
</UL>

<P><STRONG><a name="[ab]"></a>setSIPR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, w5100.o(i.setSIPR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setSIPR &rArr; IINCHIP_WRITE &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_config
</UL>

<P><STRONG><a name="[a9]"></a>setSUBR</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, w5100.o(i.setSUBR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setSUBR &rArr; applySUBR &rArr; IINCHIP_WRITE &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applySUBR
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_config
</UL>

<P><STRONG><a name="[b2]"></a>setSn_DIPR</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, w5100.o(i.setSn_DIPR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setSn_DIPR &rArr; IINCHIP_WRITE &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_config
</UL>

<P><STRONG><a name="[b1]"></a>socket</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, socket.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = socket &rArr; close &rArr; IINCHIP_READ &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_config
</UL>

<P><STRONG><a name="[4d]"></a>sysTickInit</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, os_cpu_c.o(i.sysTickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysTickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[ad]"></a>sysinit</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, w5100.o(i.sysinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sysinit &rArr; IINCHIP_WRITE &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_config
</UL>

<P><STRONG><a name="[85]"></a>u8to2bcd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(i.u8to2bcd))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeInfo
</UL>

<P><STRONG><a name="[141]"></a>uart2Init</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, rs232.o(i.uart2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_rs232
</UL>

<P><STRONG><a name="[151]"></a>uart2SendByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rs232.o(i.uart2SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2SendStr
</UL>

<P><STRONG><a name="[144]"></a>uart2SendStr</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rs232.o(i.uart2SendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = uart2SendStr &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2SendByte
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2RxbufClear
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_rs232
</UL>

<P><STRONG><a name="[80]"></a>uint32tobcd</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, lcd.o(i.uint32tobcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uint32tobcd
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeInfo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChargeEndInfo
</UL>

<P><STRONG><a name="[14c]"></a>wiz_read_buf</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, w5100.o(i.wiz_read_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wiz_read_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputValue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Hardeare_SendData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Hardeare_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>

<P><STRONG><a name="[152]"></a>wiz_write_buf</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, w5100.o(i.wiz_write_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputValue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Hardeare_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>

<P><STRONG><a name="[150]"></a>write_data</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, w5100.o(i.write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = write_data &rArr; wiz_write_buf &rArr; GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_TxMAX
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_TxMASK
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_TxBASE
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
</UL>

<P><STRONG><a name="[c7]"></a>wtdat2fio2pin0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, t6963.o(i.wtdat2fio2pin0))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_WriteData
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_WriteCMD
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e4]"></a>OS_InitEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[e1]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[e2]"></a>OS_InitRdyList</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, os_core.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[e3]"></a>OS_InitTCBList</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[e8]"></a>OS_InitTaskIdle</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, os_core.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[e9]"></a>OS_InitTaskStat</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, os_core.o(i.OS_InitTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[11b]"></a>Delayms</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, t6963.o(i.Delayms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_LCDReset
</UL>

<P><STRONG><a name="[c5]"></a>Delayus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, t6963.o(i.Delayus))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_WriteData
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_WriteCMD
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_ReadStatus
</UL>

<P><STRONG><a name="[11f]"></a>T6963_RWCheck</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, t6963.o(i.T6963_RWCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD0
</UL>

<P><STRONG><a name="[dc]"></a>T6963_WriteCMD0</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, t6963.o(i.T6963_WriteCMD0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = T6963_WriteCMD0 &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_WriteCMD
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_RWCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayEng16A
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayEng16
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DispQR_Code
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DispPic
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainDispClr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_SetBit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_LCDClear
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD2
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD1
</UL>

<P><STRONG><a name="[120]"></a>T6963_WriteCMD1</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, t6963.o(i.T6963_WriteCMD1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = T6963_WriteCMD1 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD0
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteDispData
</UL>

<P><STRONG><a name="[119]"></a>T6963_WriteCMD2</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, t6963.o(i.T6963_WriteCMD2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = T6963_WriteCMD2 &rArr; T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD0
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_SetAddressPointer
</UL>

<P><STRONG><a name="[116]"></a>T6963_WriteData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, t6963.o(i.T6963_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = T6963_WriteData &rArr; T6963_RWCheck &rArr; FSMC_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_WriteData
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_RWCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayEng16A
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_DisplayEng16
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD2
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6963_WriteCMD1
</UL>

<P><STRONG><a name="[cf]"></a>GPIO_GetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc177x_8x_gpio.o(i.GPIO_GetPointer))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[128]"></a>_printf_core</STRONG> (Thumb, 750 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>

<P><STRONG><a name="[12b]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[129]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[39]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
